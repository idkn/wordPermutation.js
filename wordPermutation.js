// GitHub : @idkn

        // initalize you word into myArray, you can do ['no'] or ['n','o']. 
        var myArray = ['no'], myArraySize = myArray.length;
        
        var splitWord = [],
            heapArr = [],
            injectInArr = [],
            permutedArr = [];

        // Basic Heap's Algorithm.
        function heap(int, arr) {
            if (int == 1) {
                for (var i = 0; i < arr.length; i++) {
                    heapArr.push(arr[i]);
                }
            } else {
                for (var i = 0; i < int - 1; i++) {
                    heap(int - 1, arr);
                    if (int % 2 == 0) {
                        var temp = arr[i];
                        arr[i] = arr[int - 1];
                        arr[int - 1] = temp;
                    } else {
                        var temp = arr[0];
                        arr[0] = arr[int - 1];
                        arr[int - 1] = temp;
                    }
                }
                heap(int - 1, arr);
            }
        }

				function factorial(number) {
    var rval=1;
    for (var i = 2; i <= number; i++)
        rval = rval * i;
    return console.log(rval);
        }
        

        function wordSplitter(arr) {
            var arrSize = arr.toString().length;
            if (arrSize === 1) {
                return arr;
            } else {
                for (var i = 0; i < arrSize; i++) {
                    splitWord[i] = arr.toString().charAt(i);
                }
                return splitWord;
            }
        }

        function permute(myArraySize, arr) {
            // check if we have a starting array with a word or if it's multiple letter. If it's a word, we will transform it into an array with multiple letter. 
            if (myArraySize === 1) {
                wordSplitter(arr);
                myArray = splitWord, myArraySize = myArray.length;
            }
            heap(myArraySize, myArray);
            
            
            // To put each value from heapArr (generated by Heap's Algorithm and create word by a step of myArray.length (for word 'web', it will be a step of 3 (because w, e, b))). 

            var heapArrLength = heapArr.length;

            for (var i = 0, u = 0; i <= heapArrLength; i++) {
                if (injectInArr.length === myArraySize) {
                    
                    // why create this ? because injectInArr isn't an array, it's un array like, we need to create a new array from its values to cheat him.
                    var args = Array.prototype.slice.call(injectInArr); 
                    
                    injectInArr.length = 0;
                    args = args.join('');
                    permutedArr[u] = args;
                    u++, i--;
                } else {
                    injectInArr.push(heapArr[i]);
                }
            }
            return permutedArr;
        }

        permute(myArraySize, myArray);
        console.log(permutedArr);
